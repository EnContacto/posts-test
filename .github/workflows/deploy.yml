name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push CreatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest ./createPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest

      - name: Build and Push GetPost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest ./getPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest

      - name: Build and Push UpdatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest ./updatePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest

      - name: Build and Push DeletePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest ./deletePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

  deploy_ec2:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Verify SSH Key Formatting
        run: |
          echo "Checking SSH Key format..."
          awk '{print NR " " $0}' ~/.ssh/id_rsa

      - name: Check Possible EC2 Users
        run: |
          for user in ubuntu ec2-user admin; do
            echo "Trying SSH with user: $user"
            if ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $user@${{ secrets.EC2_PUBLIC_IP }} "echo 'SSH Connection Successful'"; then
              echo "Using user: $user"
              echo "EC2_SSH_USER=$user" >> $GITHUB_ENV
              break
            fi
          done

      - name: Install Docker on EC2 (if not installed)
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Checking if Docker is installed..."
            if ! command -v docker &> /dev/null
            then
                echo "Docker not found. Installing..."
                sudo yum update -y
                sudo yum install docker -y
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                echo "Docker installed successfully!"
            else
                echo "Docker is already installed."
            fi

            echo "Checking if Docker Compose is installed..."
            if ! command -v docker-compose &> /dev/null
            then
                echo "Docker Compose not found. Installing..."
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                echo "Docker Compose installed successfully!"
            else
                echo "Docker Compose is already installed."
            fi
          EOF

      - name: Deploy Docker Containers on EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Stopping existing containers..."
            sudo docker-compose down || echo "No running containers to stop."

            echo "Pulling latest Docker images..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

            echo "Cleaning up unused Docker resources..."
            sudo docker system prune -f

            echo "Running containers with the latest images..."
            sudo docker run -d -p 3001:3000 --name createpost ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest
            sudo docker run -d -p 3002:3000 --name deletepost ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest
            sudo docker run -d -p 3003:3000 --name getpost ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest
            sudo docker run -d -p 3004:3000 --name updatepost ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest
          EOF
