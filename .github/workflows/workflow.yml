name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push CreatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest ./createPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest

      - name: Build and Push GetPost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest ./getPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest

      - name: Build and Push UpdatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest ./updatePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest

      - name: Build and Push DeletePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest ./deletePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

  deploy_ec2:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Verify SSH Connection
        run: ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "echo 'SSH Connection Successful'"

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          DYNAMODB_TABLE: "${{ secrets.DYNAMODB_TABLE }}"
          S3_BUCKET: "${{ secrets.S3_BUCKET }}"
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            echo "Checking and installing Docker if necessary..."
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install docker -y
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            echo "Stopping and removing existing containers..."
            for service in createpost deletepost getpost updatepost; do
              if sudo docker ps -a --format '{{.Names}}' | grep -q "^$service\$"; then
                sudo docker stop $service
                sudo docker rm $service
              fi
            done

            echo "Pulling latest Docker images..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

            echo "Verifying environment variables..."
            if [[ -z "${DYNAMODB_TABLE}" ]]; then
              export DYNAMODB_TABLE="PostsTable"
              echo "DYNAMODB_TABLE not set, using default: ${DYNAMODB_TABLE}"
            fi

            if [[ -z "${S3_BUCKET}" ]]; then
              export S3_BUCKET="distribuidabucketsocial"
              echo "S3_BUCKET not set, using default: ${S3_BUCKET}"
            fi

            echo "Starting services..."
            sudo docker run -d -p 3001:3000 --name createpost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
              -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
              -e AWS_REGION="us-east-1" \
              -e DYNAMODB_TABLE="${DYNAMODB_TABLE}" \
              -e S3_BUCKET="${S3_BUCKET}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest

            sudo docker run -d -p 3002:3000 --name deletepost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
              -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
              -e AWS_REGION="us-east-1" \
              -e DYNAMODB_TABLE="${DYNAMODB_TABLE}" \
              -e S3_BUCKET="${S3_BUCKET}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

            sudo docker run -d -p 3003:3000 --name getpost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
              -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
              -e AWS_REGION="us-east-1" \
              -e DYNAMODB_TABLE="${DYNAMODB_TABLE}" \
              -e S3_BUCKET="${S3_BUCKET}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest

            sudo docker run -d -p 3004:3000 --name updatepost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
              -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
              -e AWS_REGION="us-east-1" \
              -e DYNAMODB_TABLE="${DYNAMODB_TABLE}" \
              -e S3_BUCKET="${S3_BUCKET}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest

            echo "Deployment complete!"
          EOF