name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push CreatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest ./createPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest

      - name: Build and Push GetPost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest ./getPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest

      - name: Build and Push UpdatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest ./updatePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest

      - name: Build and Push DeletePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest ./deletePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

  deploy_ec2:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Verify SSH Connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "echo '‚úÖ SSH Connection Successful'"

      - name: Verify docker-compose.yml existence
        run: |
          echo "üìÇ Listing files in the workspace..."
          ls -lah
          
          if [ ! -f "./docker-compose.yml" ]; then
            echo "‚ùå ERROR: docker-compose.yml not found!"
            exit 1
          fi
          echo "‚úÖ docker-compose.yml found!"

      - name: Copy docker-compose.yml to EC2
        run: |
          echo "üì§ Copying docker-compose.yml to EC2..."
          scp -i ~/.ssh/id_rsa docker-compose.yml ec2-user@${{ secrets.EC2_PUBLIC_IP }}:~/app/docker-compose.yml

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            echo "‚úÖ Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

            echo "‚úÖ Changing to project directory..."
            cd ~/app || exit 1

            echo "‚úÖ Stopping existing containers..."
            sudo docker-compose down || true

            echo "‚úÖ Pulling latest images..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

            echo "‚úÖ Writing environment variables to .env file..."
            printf "AWS_ACCESS_KEY_ID=%s\nAWS_SECRET_ACCESS_KEY=%s\nAWS_REGION=us-east-1\nDYNAMODB_TABLE=%s\nS3_BUCKET=%s\nDOCKERHUB_USERNAME=%s\n" \
              "${{ secrets.AWS_ACCESS_KEY_ID }}" \
              "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              "${{ secrets.DYNAMODB_TABLE }}" \
              "${{ secrets.S3_BUCKET }}" \
              "${{ secrets.DOCKERHUB_USERNAME }}" | sudo tee ~/app/.env > /dev/null

            echo "‚úÖ Verifying Environment Variables..."
            cat ~/app/.env

            echo "‚úÖ Restarting services..."
            sudo docker-compose --env-file ~/app/.env up -d
          EOF
