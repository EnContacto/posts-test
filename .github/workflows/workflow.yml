name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push CreatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest ./createPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest

      - name: Build and Push GetPost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest ./getPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest

      - name: Build and Push UpdatePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest ./updatePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest

      - name: Build and Push DeletePost Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest ./deletePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

  deploy_ec2:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Verify SSH Connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "echo 'SSH Connection Successful'"

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ~/.ssh/id_rsa ./docker-compose.yml ec2-user@${{ secrets.EC2_PUBLIC_IP }}:~/app/docker-compose.yml

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          DYNAMODB_TABLE: "${{ secrets.DYNAMODB_TABLE }}"
          S3_BUCKET: "${{ secrets.S3_BUCKET }}"
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

            echo "Creating project directory if it doesn't exist..."
            mkdir -p ~/app

            echo "Changing to project directory..."
            cd ~/app || exit 1

            echo "Stopping existing containers..."
            sudo docker-compose down || true

            echo "Pulling latest images..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

            echo "Setting environment variables..."
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_REGION="us-east-1"
            export DYNAMODB_TABLE="${DYNAMODB_TABLE}"
            export S3_BUCKET="${S3_BUCKET}"

            echo "Restarting services..."
            sudo docker-compose up -d
          EOF